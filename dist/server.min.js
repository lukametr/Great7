import fs from 'node:fs';
import http from 'node:http';
import 'ws';
import serveStatic from 'serve-static';
import finalhandler from 'finalhandler';
import formidable from 'formidable';
import pg from 'pg';
import nodemailer from 'nodemailer';
import 'dotenv/config';

// Common interface between official pg PoolClient and PGLite interface used for testing.
// PGInterface, MailOptions, SentMessageInfo, TransportInterface, ServerInterface, ServerIncomingMessage, ServerResponseInterface, ServerCallback, createServerInterface, ServerConfig, ServerAddress წაშლილია

const DEFAULT_PORT = 8000;
class Server {
  #config;
  #server;
  #serve;

  constructor(config) {
    this.#config = config;
    this.#server = (this.#config.createServer || http.createServer)(
      this.#onRequest
    );
    this.#serve = serveStatic('./public');
  }

  listen() {
    return new Promise((resolve) => {
      const port = this.#config.port || DEFAULT_PORT;
      const host = this.#config.hostname || '127.0.0.1';
      this.#server.listen(port, host, () => {
        const address = `http://${host}:${port}`;
        resolve(address);
      });
    });
  }

  close() {
    return new Promise((resolve) => {
      this.#server.close(resolve);
    });
  }

  #onRequest = async (req, res) => {
    const headers = {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'OPTIONS, POST, GET',
      'Access-Control-Max-Age': 2592000, // 30 days
    };
    if (req.method === 'OPTIONS') {
      res.writeHead(204, headers);
      res.end();
      return;
    }
    if (!['POST', 'GET'].includes(req.method)) {
      res.writeHead(405, headers);
      res.end(`${req.method} is not allowed for the request.`);
      return;
    }
    console.log(`Request for ${req.url}`);
    if (req.url == '/register') {
      const form = formidable({});
      let fields;
      try {
        fields = (await form.parse(req))[0];
      } catch (err) {
        console.error(err);
        res.writeHead(err.httpCode || 400, { 'Content-Type': 'text/plain' });
        res.end(String(err));
        return;
      }
      console.log(fields.email, fields.password);
      res.writeHead(200, headers);
      res.end();
    } else if (['/lobby.min.js', '/lobby.min.js.map'].includes(req.url)) {
      const filePath = `dist${req.url}`;
      fs.readFile(
        filePath,
        { encoding: 'utf8' },
        (err, data) => {
          if (err != null) {
            res.writeHead(404, headers);
            res.end();
            return;
          }
          res.writeHead(200, headers);
          res.end(data || '', 'utf8');
        }
      );
    } else if (res instanceof http.ServerResponse) {
      this.#serve(req, res, finalhandler(req, res));
    } else {
      res.writeHead(404, headers);
      res.end();
    }
  };
}

const { Pool } = pg;

const dbConfig = {
  host: process.env.DB_HOST,
  user: process.env.DB_USERNAME,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 5432,
};

const smtpConfig = {
  host: process.env.SMTP_HOST,
  secure: (process.env.SECURE || '').toLowerCase() == 'true',
  port: process.env.SMTP_PORT,
  auth: { user: process.env.SMTP_USERNAME, pass: process.env.SMTP_PASSWORD },
};

async function main() {
  run();
}

async function run() {
  for (const key in dbConfig) {
    if (dbConfig[key] === undefined) {
      throw Error('Missing database config var ' + key);
    }
  }

  const transport = nodemailer.createTransport(smtpConfig);
  const pool = new Pool(dbConfig);
  //await pool.connect();
  console.log('Connected to PostgreSQL database.');
  let server = new Server({
    port: parseInt(process.env.PORT),
    db: pool,
    transport: transport,
  });
  const cleanup = async (options) => {
    console.log('Closing database connection and closing the server');
    await Promise.all([server.close(), pool.end()]);
    console.log('Done.');
    process.exit();
  };
  const addr = await server.listen();
  console.log(`Listening on ${addr}.`);
  process.on('SIGINT', cleanup);
}

main();
